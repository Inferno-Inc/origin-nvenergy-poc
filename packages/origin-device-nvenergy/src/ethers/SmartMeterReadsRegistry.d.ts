/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface SmartMeterReadsRegistryInterface extends Interface {
  functions: {
    DAILY_BUCKET: TypedFunctionDescription<{ encode([]: []): string }>;

    store: TypedFunctionDescription<{
      encode([meter, data, timestamp, bucket]: [
        string,
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    storeWithDailyBucket: TypedFunctionDescription<{
      encode([meter, data, timestamp]: [
        string,
        Arrayish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    NewReadStored: TypedEventDescription<{
      encodeTopics([meter, bucket, operator, timestamp, data]: [
        string | null,
        BigNumberish | null,
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class SmartMeterReadsRegistry extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): SmartMeterReadsRegistry;
  attach(addressOrName: string): SmartMeterReadsRegistry;
  deployed(): Promise<SmartMeterReadsRegistry>;

  on(event: EventFilter | string, listener: Listener): SmartMeterReadsRegistry;
  once(
    event: EventFilter | string,
    listener: Listener
  ): SmartMeterReadsRegistry;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): SmartMeterReadsRegistry;
  removeAllListeners(eventName: EventFilter | string): SmartMeterReadsRegistry;
  removeListener(eventName: any, listener: Listener): SmartMeterReadsRegistry;

  interface: SmartMeterReadsRegistryInterface;

  functions: {
    DAILY_BUCKET(): Promise<BigNumber>;

    store(
      meter: string,
      data: Arrayish,
      timestamp: BigNumberish,
      bucket: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    storeWithDailyBucket(
      meter: string,
      data: Arrayish,
      timestamp: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  DAILY_BUCKET(): Promise<BigNumber>;

  store(
    meter: string,
    data: Arrayish,
    timestamp: BigNumberish,
    bucket: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  storeWithDailyBucket(
    meter: string,
    data: Arrayish,
    timestamp: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    NewReadStored(
      meter: string | null,
      bucket: BigNumberish | null,
      operator: null,
      timestamp: null,
      data: null
    ): EventFilter;
  };

  estimate: {
    DAILY_BUCKET(): Promise<BigNumber>;

    store(
      meter: string,
      data: Arrayish,
      timestamp: BigNumberish,
      bucket: BigNumberish
    ): Promise<BigNumber>;

    storeWithDailyBucket(
      meter: string,
      data: Arrayish,
      timestamp: BigNumberish
    ): Promise<BigNumber>;
  };
}
